directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE

# A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

# A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Time

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
scalar EmailAddress

# A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
scalar PhoneNumber

# A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
scalar URL

# A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
scalar ObjectID

# A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
scalar UUID

# A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
scalar GUID

# A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports
scalar Port

# A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217.
scalar Currency

# Represents NULL values
scalar Void

input CreateCategory {
  name: String!
}

type Category {
  id: ObjectID!
  name: String!
}

type Query {
  listCategories: [Category!] #ok
  userCommentReports: [CommentReport!] #ok
  openCommentReports: [CommentReport!]
  showCommentReport(id: ObjectID!): CommentReport!
  userPostReports: [PostReport!] #ok
  openPostReports: [PostReport!]
  showPostReport(id: ObjectID): PostReport!
  getPost(id: ObjectID!): Post! #ok
  listPosts(filter: PostFilter): [ResumePost] #ok
  getTag(id: ObjectID!): Tag #ok
  listTags(filter: TagFilter): [Tag]! #ok
  getUser(id: ObjectID!): User #ok
  login(data: LoginData!): AuthenticateUser! #ok
  userSummary(id: ObjectID!): UserSummary #ok bu need fix de algorithm to likes
}

type Mutation {
  createCategory(data: CreateCategory!): Category! #ok
  createCommentReport(data: OpenCommentReport!): NewCommentReport! #ok
  closeCommentReport(data: CloseCommentReport!): CommentReport!
  likeComment(comment_id: ObjectID!): Int #ok
  createComment(data: CreateComment!): Comment! #ok
  updateComment(data: UpdateComment!): Comment! #ok
  deleteComment(id: ObjectID!): Void
  createPostReport(data: OpenPostReport!): NewPostReport! #ok
  closePostReport(data: ClosePostReport!): PostReport!
  likePost(post_id: ObjectID!): Int #ok
  createPost(data: CreatePost!): Post! #ok
  updatePost(data: UpdatePost!): Post!
  deletePost(id: ObjectID!): Void
  createTag(data: CreateTag!): Tag! #ok
  createUser(data: CreateUser!): User! #ok
  updateUser(data: UpdateUser!): User! #ok
  deleteUser(data: DeleteUser!): Void
  forgotPassword(data: EmailInput!): Void #ok
  resetPassword(data: ResetPassword!): Void #ok
}

input OpenCommentReport {
  comment_id: ObjectID!
  body: String!
  title: String!
}

input CloseCommentReport {
  id: ObjectID!
  feedback: String!
  action: String!
}

type NewCommentReport {
  id: ObjectID
  comment_id: ObjectID
  title: String
  body: String
  closed: Boolean
  created_at: Date
}

type CommentReport {
  id: ObjectID!
  comment_id: ObjectID!
  title: String!
  body: String!
  closed: Boolean!
  feedback: String
  action: String
  created_at: Date!
  updated_at: Date!
}

input CreateComment {
  post_id: ObjectID!
  body: String!
}

input UpdateComment {
  id: ObjectID!
  body: String!
}

type Comment {
  id: String!
  author: Author!
  created_at: Date!
  updated_at: Date!
  body: String!
  post_id: ObjectID!
  likes: Int!
  liked: Boolean
}

input OpenPostReport {
  post_id: ObjectID!
  body: String!
  title: String!
}

input ClosePostReport {
  id: ObjectID!
  feedback: String!
  action: String!
}

type NewPostReport {
  id: ObjectID
  post_id: ObjectID
  title: String
  body: String
  closed: Boolean
  created_at: Date
}

type PostReport {
  id: ObjectID!
  post_id: ObjectID!
  title: String!
  body: String!
  closed: Boolean!
  feedback: String
  action: String
  created_at: Date!
  updated_at: Date!
}

input PostFilter {
  category_id: ObjectID
  part_of_title: String
  author_id: ObjectID
}

input CreatePost {
  title: String!
  resume: String!
  image_url: URL
  body: String!
  category_id: ObjectID!
  tag_ids: [CreatePostTag!]!
}

input UpdatePost {
  id: ObjectID!
  title: String
  image_url: URL
  resume: String
  body: String
  tag_id: [CreatePostTag!]
}

type Author {
  id: ObjectID!
  name: String!
  avatar_url: URL
}

type Post {
  id: ObjectID!
  author: Author!
  title: String!
  image_url: URL
  resume: String!
  body: String!
  category: Category!
  created_at: Date!
  updated_at: Date!
  comments: [Comment!]
  tags: [Tag!]!
  likes: Int!
  liked: Boolean
}

type ResumePost {
  id: ObjectID!
  author: Author!
  title: String!
  image_url: URL
  resume: String!
  body: String!
  category: Category!
  created_at: Date!
  updated_at: Date!
  tags: [Tag!]!
}

input TagFilter {
  category_id: ObjectID!
}

input CreateTag {
  name: String!
  category_id: ObjectID!
}

input CreatePostTag {
  tag_id: ObjectID!
}

type Tag {
  id: String!
  name: String!
  category: Category!
}

input CreateUser {
  email: EmailAddress!
  name: String!
  description: String
  password: String!
  github: String
  linkedin: String
}

input UpdateUser {
  email: EmailAddress!
  name: String
  password: String
  description: String
  old_password: String
  github: String
  linkedin: String
  avatar_url: URL
}

input DeleteUser {
  email: EmailAddress!
}

input LoginData {
  email: EmailAddress!
  password: String!
}

input ResetPassword {
  token: UUID!
  password: String!
  password_confirmation: String!
}

type User {
  id: ObjectID
  name: String!
  email: EmailAddress!
  description: String
  avatar_url: URL
  github: String
  linkedin: String
  created_at: Date!
  updated_at: Date!
  level: Int!
  exp_percent: Float!
  access_level: String!
}

type AuthenticateUser {
  token: ID!
  user: User!
}

type UserActivity {
  postsLiked: Int
  postsCreated: Int
  commentsLiked: Int
  commentsCreated: Int
}

type UserSummary {
  all: UserActivity
  lastMonth: UserActivity
  lastWeek: UserActivity
  weekExp: Int
  lastWeekPosts: [Post]
}

input EmailInput {
  email: EmailAddress!
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

# The `Upload` scalar type represents a file upload.
scalar Upload
